{"version":3,"sources":["constants/socketEvents.tsx","components/Game/Initial/index.tsx","components/Game/GameBoard/index.tsx","components/Game/ListOfRooms/index.tsx","components/Game/index.tsx","services/websocketService.ts","services/player.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["SocketEvents","Initial","_ref","onFirstButtonClick","onSecondButtonClick","react_default","a","createElement","className","type","onClick","GameBoard","board","map","row","rowIndex","key","column","columnIndex","concat","symbol","ListOfRooms","rooms","room","id","GameStatuses","WebsocketInstance","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_props","_socket","onOpen","onInitialized","assertThisInitialized","onMessage","message","decodedMessage","decodeMessage","data","emit","NEW_MESSAGE","WebSocket","onmessage","onopen","JSON","stringify","parse","preparedMessage","encodeMessage","send","require","ClientPlayer","socket","GET_GAMES_LIST","RECEIVED_GAMES_LIST","JOIN_GAME","CREATED_NEW_GAME","UPDATE_BOARD","createNewGame","sendMessage","CREATE_NEW_GAME","fetchListOfGames","joinGameRoom","roomId","move","x","y","PLAYER_MOVE","on","Game","_React$useState","React","INITIAL","_React$useState2","slicedToArray","status","setStatus","_React$useState3","undefined","_React$useState4","playerInstance","setPlayerInstance","_React$useState5","_React$useState6","setRooms","_React$useState7","_React$useState8","setBoard","onWesocketInitialized","websocketInstance","Player","INITIALIZED","WebsocketService","isInitialized","onReceivingGamesList","length","toast","info","SHOW_LIST_OF_ROOMS","onJoinGame","getBoard","GAME","onUpdateBoard","_ref2","mountInitialScreen","mountRoomsListScreen","mountBoard","react","Game_Initial","Game_ListOfRooms","Game_GameBoard","rowId","columnId","App","react_toastify","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.61461469.chunk.js","sourcesContent":["enum SocketEvents {\n  NEW_MESSAGE = \"NEW_MESSAGE\",\n  // game\n  CREATE_NEW_GAME = \"CREATE_NEW_GAME\",\n  CREATED_NEW_GAME = \"CREATED_NEW_GAME\",\n  JOIN_GAME = \"JOIN_GAME\",\n  EXIT_FROM_GAME = \"EXIT_FROM_GAME\",\n  UPDATE_BOARD = \"UPDATE_BOARD\",\n  // list\n  GET_GAMES_LIST = \"GET_GAMES_LIST\",\n  RECEIVED_GAMES_LIST = \"RECEIVED_GAMES_LIST\",\n  REFRESH_GAMES_LIST = \"REFRESH_GAMES_LIST\",\n  // player\n\n  PLAYER_MOVE = \"PLAYER_MOVE\"\n}\n\nexport default SocketEvents;\n","import React from \"react\";\n\nimport \"./_styles.css\";\n\nconst Initial: React.FC<{\n  onFirstButtonClick: () => void;\n  onSecondButtonClick: () => void;\n}> = ({ onFirstButtonClick, onSecondButtonClick }) => {\n  return (\n    <div className=\"initialscreen\">\n      <button\n        type=\"button\"\n        className=\"btn btn-primary initialscreen__button\"\n        onClick={onFirstButtonClick}\n      >\n        Create a new game\n      </button>\n      <button\n        type=\"button\"\n        className=\"btn btn-primary initialscreen__button\"\n        onClick={onSecondButtonClick}\n      >\n        Join existing games\n      </button>\n    </div>\n  );\n};\nexport default Initial;\n","import React from \"react\";\n\nimport \"./_styles.css\";\n\nconst GameBoard: React.FC<{\n  board: any;\n  onClick: (rowId: number, columnId: number) => void;\n}> = ({ board, onClick }) => {\n  return (\n    <div className=\"gameboard\">\n      {board.map((row: any, rowIndex: number) => {\n        return (\n          <div className=\"row\" key={rowIndex}>\n            {row.map(\n              (column: { symbol: string } | undefined, columnIndex: number) => (\n                <div\n                  className=\"square\"\n                  key={`${rowIndex}_${columnIndex}`}\n                  onClick={() => onClick(rowIndex, columnIndex)}\n                >\n                  {column ? column.symbol : null}\n                </div>\n              )\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\nexport default GameBoard;\n","import React from \"react\";\n\nimport \"./_styles.css\";\n\nconst ListOfRooms: React.FC<{\n  rooms: any[];\n  onClick: (roomId: string) => void;\n}> = ({ rooms, onClick }) => {\n  return (\n    <div className=\"roomslist\">\n      <h3 className=\"text-center\">List of gaming rooms</h3>\n      {rooms.map(room => (\n        <button\n          key={room.id}\n          type=\"button\"\n          className=\"btn btn-primary initialscreen__button\"\n          onClick={() => onClick(room.id)}\n        >\n          Join {room.id} room\n        </button>\n      ))}\n    </div>\n  );\n};\nexport default ListOfRooms;\n","import * as React from \"react\";\nimport { toast } from \"react-toastify\";\nimport Initial from \"./Initial\";\nimport GameBoard from \"./GameBoard\";\nimport ListOfRooms from \"./ListOfRooms\";\nimport SocketEvents from \"./../../constants/socketEvents\";\nimport WebsocketService from \"./../../services/websocketService\";\nimport Player from \"./../../services/player\";\n\nenum GameStatuses {\n  INITIAL = \"INITIAL\",\n  INITIALIZED = \"INITIALIZED\",\n  SHOW_LIST_OF_ROOMS = \"SHOW_LIST_OF_ROOMS\",\n  SHOW_BOARD = \"SHOW_BOARD\",\n  GAME = \"GAME\"\n}\n\nexport default function Game() {\n  const [status, setStatus] = React.useState(GameStatuses.INITIAL);\n  const [playerInstance, setPlayerInstance] = React.useState<\n    Player | undefined\n  >(undefined);\n  const [rooms, setRooms] = React.useState<any[] | undefined>(undefined);\n  const [board, setBoard] = React.useState<any[] | undefined>(undefined);\n  const onWesocketInitialized = (websocketInstance: WebsocketService) => {\n    setPlayerInstance(new Player(websocketInstance));\n    setStatus(GameStatuses.INITIALIZED);\n  };\n\n  React.useEffect(() => {\n    new WebsocketService({\n      onInitialized: onWesocketInitialized\n    });\n  }, []);\n\n  const isInitialized = status === GameStatuses.INITIALIZED;\n\n  // socket events callbacks\n  const onReceivingGamesList = ({ rooms }: { rooms: any[] }) => {\n    if (!rooms.length) {\n      return toast.info(\"No rooms yet\");\n    }\n    setRooms(rooms);\n    setStatus(GameStatuses.SHOW_LIST_OF_ROOMS);\n  };\n  const onJoinGame = () => {\n    setBoard(playerInstance!.getBoard());\n    setStatus(GameStatuses.GAME);\n  };\n\n  const onUpdateBoard = ({ board }: { board: any }) => {\n    setBoard(board);\n  };\n\n  React.useEffect(() => {\n    if (isInitialized && playerInstance) {\n      // attach socket listeners\n      playerInstance.on(SocketEvents.RECEIVED_GAMES_LIST, onReceivingGamesList);\n      playerInstance.on(SocketEvents.JOIN_GAME, onJoinGame);\n      playerInstance.on(SocketEvents.CREATED_NEW_GAME, onJoinGame);\n      playerInstance.on(SocketEvents.UPDATE_BOARD, onUpdateBoard);\n    }\n  }, [isInitialized]);\n\n  const onFirstButtonClick = () => {\n    playerInstance!.createNewGame();\n  };\n  const onSecondButtonClick = () => {\n    playerInstance!.fetchListOfGames();\n  };\n  const onRoomClick = (roomId: string) => {\n    playerInstance!.joinGameRoom(roomId);\n  };\n  const onBoardSquareClick = (rowId: number, columnId: number) => {\n    playerInstance!.move(rowId, columnId);\n  };\n\n  const mountInitialScreen = status === GameStatuses.INITIALIZED;\n  const mountRoomsListScreen = status === GameStatuses.SHOW_LIST_OF_ROOMS;\n  const mountBoard = status === GameStatuses.GAME;\n\n  return (\n    <div className=\"container\">\n      {mountInitialScreen ? (\n        <Initial\n          onFirstButtonClick={onFirstButtonClick}\n          onSecondButtonClick={onSecondButtonClick}\n        />\n      ) : null}\n      {mountRoomsListScreen ? (\n        <ListOfRooms rooms={rooms!} onClick={onRoomClick} />\n      ) : null}\n      {mountBoard ? (\n        <GameBoard board={board} onClick={onBoardSquareClick} />\n      ) : null}\n    </div>\n  );\n}\n","import SocketEvents from \"../constants/socketEvents\";\n\nconst EventEmitter = require(\"events\");\n\ninterface IWebsocketInstanceProps {\n  onInitialized: (WebsocketService: WebsocketInstance) => void;\n}\n\nexport default class WebsocketInstance extends EventEmitter {\n  _props: IWebsocketInstanceProps;\n  _socket: WebSocket;\n  constructor(props: IWebsocketInstanceProps) {\n    super();\n\n    this._socket = new WebSocket(\"ws://localhost:4446\");\n    this._props = props;\n    this._socket.onmessage = this.onMessage;\n    this._socket.onopen = this.onOpen;\n  }\n\n  encodeMessage(message: string) {\n    return JSON.stringify(message);\n  }\n  decodeMessage(message: string) {\n    return JSON.parse(message);\n  }\n  sendMessage(message: string) {\n    const preparedMessage = this.encodeMessage(message);\n    this._socket!.send(preparedMessage);\n  }\n  onOpen = () => {\n    this._props.onInitialized(this);\n  };\n  onMessage = (message: MessageEvent) => {\n    const decodedMessage = this.decodeMessage(message.data);\n    this.emit(SocketEvents.NEW_MESSAGE, decodedMessage);\n  };\n}\n","import WebsocketInstance from \"./websocketService\";\nimport SocketEvents from \"../constants/socketEvents\";\n\nconst EventEmitter = require(\"events\");\n\nexport default class ClientPlayer extends EventEmitter {\n  constructor(socket: WebsocketInstance) {\n    super();\n    this._socket = socket;\n    this._socket.on(SocketEvents.NEW_MESSAGE, this.onMessage);\n  }\n\n  sendMessage(message: any) {\n    this._socket.sendMessage(message);\n  }\n\n  onMessage = (message: any) => {\n    switch (message.type) {\n      case SocketEvents.GET_GAMES_LIST:\n        this.emit(SocketEvents.RECEIVED_GAMES_LIST, {\n          rooms: message.rooms\n        });\n        break;\n      case SocketEvents.JOIN_GAME:\n        this.emit(SocketEvents.JOIN_GAME);\n        break;\n      case SocketEvents.CREATED_NEW_GAME:\n        this.emit(SocketEvents.CREATED_NEW_GAME);\n        break;\n      case SocketEvents.UPDATE_BOARD:\n        this.emit(SocketEvents.UPDATE_BOARD, { board: message.board });\n        break;\n    }\n  };\n\n  createNewGame = () => {\n    this.sendMessage({ type: SocketEvents.CREATE_NEW_GAME });\n  };\n  fetchListOfGames = () => {\n    this.sendMessage({ type: SocketEvents.GET_GAMES_LIST });\n  };\n  joinGameRoom = (roomId: string) => {\n    this.sendMessage({\n      type: SocketEvents.JOIN_GAME,\n      roomId\n    });\n  };\n\n  move = (x: number, y: number) => {\n    this.sendMessage({\n      type: SocketEvents.PLAYER_MOVE,\n      x,\n      y\n    });\n  };\n  getBoard() {\n    return [[null, null, null], [null, null, null], [null, null, null]];\n  }\n}\n","import React from \"react\";\nimport Game from \"./components/Game\";\nimport { ToastContainer } from \"react-toastify\";\n\n// import styles\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"./App.css\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Game />\n      <ToastContainer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}